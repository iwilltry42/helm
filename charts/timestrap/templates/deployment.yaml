apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "timestrap.fullname" . }}
  labels:
    {{- include "timestrap.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "timestrap.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "timestrap.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "timestrap.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -c
          args:
            - "daphne timestrap.asgi:application --port 80 --bind 0.0.0.0 -v2"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: timestrap.settings.docker
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.authSecret.existingSecret }}"
                  key: "{{ .Values.config.authSecret.existingSecretKey }}"
            - name: REDIS_HOST
              value: "{{ .Values.config.redis.host }}"
            - name: POSTGRES_HOST
              value: "{{ .Values.config.postgres.host }}"
            - name: POSTGRES_DB
              value: "{{ .Values.config.postgres.database }}"
            - name: POSTGRES_USER
              value: "{{ .Values.config.postgres.username }}"
            {{- if (and .Values.config.postgres.password (not .Values.config.postgres.existingSecret.enabled))}}
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.config.postgres.password }}"
            {{- else if .Values.config.postgres.existingSecret.enabled }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.config.postgres.existingSecret.secretName }}"
                  key: "{{ .Values.config.postgres.existingSecret.passwordKey }}"
            {{- end }}
            {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
